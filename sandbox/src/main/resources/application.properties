spring.datasource.url=jdbc:postgresql://pg-18ada384-jeremyrirawan-3e90.a.aivencloud.com:10580/sandbox

## Username for connecting to the PostgreSQL database
spring.datasource.username=avnadmin


## Password for connecting to the PostgreSQL database 
spring.datasource.password=AVNS_2br2J100TbzakZ88JrM


## JDBC driver class name for PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver


# Configures Hibernate to use the PostgreSQL database dialect. 
# This allows Hibernate to generate SQL optimized for PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# Configures Hibernate's DDL generation strategy. 
# Setting this to "none" prevents Hibernate from automatically creating/updating the database schema.
# This allows the database schema to be managed manually.
spring.jpa.hibernate.ddl-auto=none


# Enables logging of generated SQL statements to stdout.
# Useful for troubleshooting queries during development.
spring.jpa.show-sql=true


# Disables Hibernate's use of JDBC metadata to determine the column types to use for tables. 
# When set to false, Hibernate will use its own type determination instead.
# This is useful in some cases to avoid issues with certain databases reporting incorrect metadata.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false


# Configures Hibernate to use the PostgreSQL database dialect.  
# This allows Hibernate to generate SQL optimized for PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# Configures Hibernate to format the generated SQL statements in the logs,
# making them easier to read. Useful for debugging.
spring.jpa.properties.hibernate.format_sql=true


# Configures Hibernate to quote all identifiers globally,
# instead of only when needed. This forces all tables
# and columns to be quoted, avoiding errors with
# case-sensitive names.
spring.jpa.properties.hibernate.globally_quoted_identifiers=true


# Configures Hibernate to not use JDBC batch operations for LOB creation.
# Setting this to true forces Hibernate to execute an individual statement 
# per LOB instead of using batching. This avoids issues with some databases 
# that do not support batch statements for LOBs.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


# Configures Hibernate to disable connection provider's autocommit mode.
# When true, the connection provider will not commit automatically.
# This allows finer grained control over transaction handling.
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true


# Configures Hibernate's connection release mode to release the database 
# connection after the transaction completes (commit or rollback).
# This avoids keeping connections alive unnecessarily.
spring.jpa.properties.hibernate.connection.release_mode=after_transaction


# Configures the character set encoding to use for database connections.
# Setting this to UTF-8 enables full Unicode support.
spring.jpa.properties.hibernate.connection.charSet=UTF-8


# Configures Hibernate to disable autocommit mode for database connections. 
# When set to false, the connection provider will not automatically commit changes.
# This allows finer grained control over transaction handling.
spring.jpa.properties.hibernate.connection.autocommit=false


# Configures the JDBC driver class to use for database connections.
# Setting this to org.postgresql.Driver enables PostgreSQL database connectivity.
spring.jpa.properties.hibernate.connection.driver_class=org.postgresql.Driver


# Configures the JDBC URL to use for connecting to the PostgreSQL database.
# Specifies the database host, port, name and that SSL should be used to connect.
spring.jpa.properties.hibernate.connection.url=jdbc:postgresql://pg-18ada384-jeremyrirawan-3e90.a.aivencloud.com:10580/sandbox?sslmode=require


# Configures the username to use for connecting to the database.
spring.jpa.properties.hibernate.connection.username=avnadmin


# Configures the password to use for connecting to the database.
spring.jpa.properties.hibernate.connection.password=AVNS_2br2J100TbzakZ88JrM

# Configures the maximum time in milliseconds that a connection can remain
# idle in the pool before being removed and closed. This helps avoid accumulating
# idle connections that are no longer in use.
spring.datasource.hikari.connection-timeout=20000


# Configures the maximum number of connections that can be part of the connection pool for the data source.
# This setting controls the maximum number of database connections that can be opened concurrently.
spring.datasource.hikari.maximum-pool-size=5


# Configures the minimum number of idle connections that HikariCP tries to maintain in the pool. 
# If the idle connections dip below this value, HikariCP will make a best effort to add additional connections quickly.
spring.datasource.hikari.minimum-idle=1


# Configures the maximum time in milliseconds that a connection can remain
# idle in the pool. After this timeout expires, the connection will be 
# terminated and removed from the pool. This helps avoid accumulating 
# idle connections.
spring.datasource.hikari.idle-timeout=30000


# Configures the maximum lifetime in milliseconds for a connection after it is closed. 
# Connections that exceed this threshold are proactively retired from the pool 
# to avoid issues with database session expiration.
spring.datasource.hikari.max-lifetime=200000


# spring.datasource.hikari.test-while-idle=true
# spring.datasource.hikari.test-on-borrow=true
# spring.datasource.hikari.validation-query=SELECT 1

# Logging Related

# Sets the logging level for org.springframework.jdbc.datasource to DEBUG.
# This enables more verbose logging from Spring's JDBC datasource handling,
# which can help debug issues with database connectivity and SQL generation.
logging.level.org.springframework.jdbc.datasource=DEBUG